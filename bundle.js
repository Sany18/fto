(()=>{"use strict";var t={751:(t,e,n)=>{n.d(e,{A:()=>s});var r=n(513),o=n.n(r),i=n(119),a=n.n(i)()(o());a.push([t.id,".Chart__wrapper{flex:1;display:flex;overflow:hidden;align-items:center;justify-content:center}.Chart__canvas{width:100%;height:100%;cursor:grab}.Chart__spinner{top:50%;left:50%;width:100px;height:100px;border:16px solid var(--primary-color);position:absolute;animation:spin 2s linear infinite;border-top:16px solid rgba(0,0,0,0);margin-top:calc(-50px - 16px);margin-left:calc(-50px - 16px);border-radius:50%}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}","",{version:3,sources:["webpack://./src/components/Chart/Chart.scss"],names:[],mappings:"AAAA,gBACE,MAAA,CACA,YAAA,CACA,eAAA,CACA,kBAAA,CACA,sBAAA,CAGF,eACE,UAAA,CACA,WAAA,CACA,WAAA,CAIF,gBACE,OAAA,CACA,QAAA,CACA,WAAA,CACA,YAAA,CACA,sCAAA,CACA,iBAAA,CACA,iCAAA,CACA,mCAAA,CACA,6BAAA,CACA,8BAAA,CACA,iBAAA,CAGF,gBACE,GACE,sBAAA,CAEF,KACE,wBAAA,CAAA",sourcesContent:[".Chart__wrapper {\n  flex: 1;\n  display: flex;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n}\n\n.Chart__canvas {\n  width: 100%;\n  height: 100%;\n  cursor: grab;\n}\n\n$border-width: 16px;\n.Chart__spinner {\n  top: 50%;\n  left: 50%;\n  width: 100px;\n  height: 100px;\n  border: $border-width solid var(--primary-color);\n  position: absolute;\n  animation: spin 2s linear infinite;\n  border-top: $border-width solid transparent;\n  margin-top: calc(-50px - #{$border-width});\n  margin-left: calc(-50px - #{$border-width});\n  border-radius: 50%;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n"],sourceRoot:""}]);const s=a},212:(t,e,n)=>{n.d(e,{A:()=>s});var r=n(513),o=n.n(r),i=n(119),a=n.n(i)()(o());a.push([t.id,':root{--primary-color: #007bff;--secondary-color: #6c757d;--success-color: #28a745;--info-color: #17a2b8;--warning-color: #ffc107;--danger-color: #dc3545;--light-color: #f8f9fa;--dark-color: #343a40;--chank-bg-color-1: #f7f7f7;--chank-bg-color-2: #e9ecef;--bar-up-color: #28a745;--bar-down-color: #dc3545}body{height:100svh;margin:0;padding:0;display:flex;font-family:"Arial",sans-serif;flex-direction:column}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"AAAA,MACE,wBAAA,CACA,0BAAA,CACA,wBAAA,CACA,qBAAA,CACA,wBAAA,CACA,uBAAA,CACA,sBAAA,CACA,qBAAA,CAGA,2BAAA,CACA,2BAAA,CACA,uBAAA,CACA,yBAAA,CAGF,KACE,aAAA,CACA,QAAA,CACA,SAAA,CACA,YAAA,CACA,8BAAA,CACA,qBAAA",sourcesContent:[":root {\n  --primary-color: #007bff;\n  --secondary-color: #6c757d;\n  --success-color: #28a745;\n  --info-color: #17a2b8;\n  --warning-color: #ffc107;\n  --danger-color: #dc3545;\n  --light-color: #f8f9fa;\n  --dark-color: #343a40;\n\n  // Chart colors\n  --chank-bg-color-1: #f7f7f7;\n  --chank-bg-color-2: #e9ecef;\n  --bar-up-color: #28a745;\n  --bar-down-color: #dc3545;\n}\n\nbody {\n  height: 100svh;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  font-family: 'Arial', sans-serif;\n  flex-direction: column;\n}\n"],sourceRoot:""}]);const s=a},119:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var h=0;h<t.length;h++){var u=[].concat(t[h]);r&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},513:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},345:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var c=t[s],h=r.base?c[0]+r.base:c[0],u=i[h]||0,l="".concat(h," ").concat(u);i[h]=u+1;var p=n(l),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(f);else{var d=o(f,r);r.byIndex=s,e.splice(s,0,{identifier:l,updater:d,references:1})}a.push(l)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=n(i[a]);e[s].references--}for(var c=r(t,o),h=0;h<i.length;h++){var u=n(i[h]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=c}}},6:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},677:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},505:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},894:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},850:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0;var r=n(345),o=n.n(r),i=n(894),a=n.n(i),s=n(6),c=n.n(s),h=n(505),u=n.n(h),l=n(677),p=n.n(l),f=n(850),d=n.n(f),A=n(751),v={};v.styleTagTransform=d(),v.setAttributes=u(),v.insert=c().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=p(),o()(A.A,v),A.A&&A.A.locals&&A.A.locals;var m,y,C=function(){function t(){this.elements=[],this.createChart()}return t.prototype.createChart=function(){return this.wrapper=document.createElement("div"),this.wrapper.classList.add("Chart__wrapper"),this.canvas=document.createElement("canvas"),this.canvas.classList.add("Chart__canvas"),this.ctx=this.canvas.getContext("2d"),this.spinner=document.createElement("div"),this.spinner.classList.add("Chart__spinner"),this.wrapper.appendChild(this.canvas),this.wrapper.appendChild(this.spinner),this.createResizeListener(),this.showSpinner(),this},t.prototype.getCanvas=function(){return this.canvas},t.prototype.getWrapper=function(){return this.wrapper},t.prototype.destroyChart=function(){return this.destroyResizeListener(),this.wrapper.remove(),this},t.prototype.draw=function(t){return this.elements.push(t),requestAnimationFrame((function(){t()})),this},t.prototype.render=function(){var t=this;requestAnimationFrame((function(){t.elements.forEach((function(t){t()}))}))},t.prototype.addDOMElement=function(){return document.body.appendChild(this.wrapper),this.onResize(),this},t.prototype.showSpinner=function(){return this.spinner.style.display="block",this},t.prototype.hideSpinner=function(){return this.spinner.style.display="none",this},t.prototype.testDraw=function(){var t=this;this.draw((function(){t.ctx.beginPath(),t.ctx.arc(100,75,50,0,2*Math.PI),t.ctx.stroke()}))},t.prototype.onResize=function(){return this.canvas.width=this.wrapper.offsetWidth,this.canvas.height=this.wrapper.offsetHeight,this.render(),this},t.prototype.createResizeListener=function(){var t=this;window.addEventListener("resize",(function(){return t.onResize()}))},t.prototype.destroyResizeListener=function(){var t=this;window.removeEventListener("resize",(function(){return t.onResize()}))},t}(),g=function(){function t(){}return t.getRandomColor=function(){return"#".concat(Math.floor(16777215*Math.random()).toString(16))},t.getThemeColor=function(t){return window.getComputedStyle(document.documentElement).getPropertyValue("--".concat(t))},t}(),w=(m=function(t,e){return m=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},m(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}m(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),b=function(){return b=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var o in e=arguments[n])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},b.apply(this,arguments)},x=100,B=function(t){function e(e){var n=t.call(this)||this;return n.mouseDown=!1,n.mouseDownX=0,n.scale=1,n.shift=0,n.putData(e),n}return w(e,t),e.prototype.putData=function(t){var e=this;t&&(this.chartChanks=t,this.hideSpinner(),this.createListeners(),this.calculateStaticValues(),this.draw((function(){e.calculateDynamicValues(),e.drawChart()})))},e.prototype.drawChart=function(){this.drawChanks(),this.drawBars(),this.drawLegend()},e.prototype.calculateStaticValues=function(){var t=this;this.allBars=[],this.chartChanks.forEach((function(e){var n=e.ChunkStart;e.Bars.forEach((function(e){t.allBars.push(b(b({},e),{Time:n+e.Time}))}))})),this.totalDataLength=this.allBars.length;for(var e=0;e<this.allBars.length;e++)0===e?(this.minValue=this.allBars[e].Low,this.maxValue=this.allBars[e].High):(this.minValue=Math.min(this.minValue,this.allBars[e].Low),this.maxValue=Math.max(this.maxValue,this.allBars[e].High))},e.prototype.calculateDynamicValues=function(){this.chartWidth=this.canvas.width*this.scale,this.chartHeight=this.canvas.height-32,this.chartBarsAreaWidth=this.chartWidth-x,this.barWidth=this.chartBarsAreaWidth/this.totalDataLength},e.prototype.zoom=function(t){var e=t.deltaY>0?-1:1,n=t.offsetX,r=this.scale,o=this.scale*(1===e?1.1:.9),i=Math.min(Math.max(o,1),100),a=i/r,s=n-(n-this.shift)*a;this.scale=i,this.shiftChart(s)},e.prototype.shiftChart=function(t){this.shift=Math.max(Math.min(t,0),this.canvas.width-this.chartWidth),this.render()},e.prototype.setCursorType=function(t){this.canvas.style.cursor=t},e.prototype.destroyChart=function(){return t.prototype.destroyChart.call(this),this.destroyListeners(),this},e.prototype.drawChanks=function(){var t=this,e=function(e){return e<0?0:t.chartBarsAreaWidth/t.totalDataLength*t.chartChanks[e].Bars.length};this.chartChanks.forEach((function(n,r){t.ctx.fillStyle=g.getThemeColor("chank-bg-color-".concat(r+1)),t.ctx.fillRect(r*e(r-1)+t.shift,0,e(r),t.chartHeight)}))},e.prototype.drawMesh=function(){var t=this.chartBarsAreaWidth/20,e=this.chartHeight/10;this.ctx.strokeStyle="gray",this.ctx.lineWidth=.5;for(var n=0;n<=this.chartBarsAreaWidth;n+=t)this.ctx.beginPath(),this.ctx.moveTo(n+this.shift,0),this.ctx.lineTo(n+this.shift,this.chartHeight),this.ctx.stroke();for(var r=0;r<=this.chartHeight;r+=e)this.ctx.beginPath(),this.ctx.moveTo(this.shift,r),this.ctx.lineTo(this.chartBarsAreaWidth+this.shift,r),this.ctx.stroke()},e.prototype.drawBars=function(){var t=this;this.allBars.forEach((function(e,n){var r=e.Close-e.Open;e.High,e.Low,t.ctx.fillStyle=g.getThemeColor(r>0?"bar-up-color":"bar-down-color"),t.ctx.fillRect(n*t.barWidth+t.shift,t.chartHeight-(e.Close-t.minValue)/(t.maxValue-t.minValue)*t.chartHeight,t.barWidth,(e.Close-e.Open)/(t.maxValue-t.minValue)*t.chartHeight)}))},e.prototype.drawSeparators=function(){this.ctx.strokeStyle="black",this.ctx.lineWidth=1,this.ctx.beginPath(),this.ctx.moveTo(0,this.chartHeight),this.ctx.lineTo(this.canvas.width,this.chartHeight),this.ctx.stroke(),this.ctx.fillStyle="white",this.ctx.fillRect(this.canvas.width-x,0,x,this.chartHeight+1),this.ctx.fillStyle="white",this.ctx.fillRect(this.shift,this.chartHeight,this.chartWidth,32),this.ctx.strokeStyle="black",this.ctx.lineWidth=1,this.ctx.beginPath(),this.ctx.moveTo(this.canvas.width-x,0),this.ctx.lineTo(this.canvas.width-x,this.chartHeight),this.ctx.stroke()},e.prototype.drawBottomLabels=function(){var t=Math.floor(this.totalDataLength/10);this.ctx.fillStyle="black",this.ctx.font="".concat(16,"px Arial"),this.ctx.textAlign="center";for(var e=1;e<10;e++){var n=Math.min(e*t,this.totalDataLength-1),r=this.allBars[n],o=new Date(null==r?void 0:r.Time).toLocaleTimeString(),i=n*this.barWidth+this.barWidth/2+this.shift,a=this.chartHeight+16+8;this.ctx.fillText(o,i,a)}},e.prototype.drawRightLabels=function(){var t=(this.maxValue-this.minValue)/10;this.ctx.fillStyle="black",this.ctx.font="".concat(16,"px Arial"),this.ctx.textAlign="right";for(var e=-1/0,n=0;n<=10;n++){var r=this.minValue+n*t,o=r.toFixed(2),i=this.canvas.width-5,a=this.chartHeight-(r-this.minValue)/(this.maxValue-this.minValue)*this.chartHeight;a>=16&&a<=this.chartHeight-16&&Math.abs(a-e)>=21&&(this.ctx.fillText(o,i,a),e=a)}},e.prototype.drawLegend=function(){this.drawMesh(),this.drawSeparators(),this.drawBottomLabels(),this.drawRightLabels()},e.prototype.onMouseLeave=function(){this.setCursorType("grab"),this.mouseDown=!1},e.prototype.onMouseDown=function(t){this.mouseDownX=t.clientX,this.mouseDown=!0,this.setCursorType("grabbing")},e.prototype.onMouseUp=function(){this.mouseDown=!1,this.setCursorType("grab")},e.prototype.onPullHorizontal=function(t){this.mouseDown&&(this.shiftChart(this.shift+t.clientX-this.mouseDownX),this.mouseDownX=t.clientX)},e.prototype.onZoom=function(t){t.preventDefault(),this.zoom(t)},e.prototype.createListeners=function(){var t=this;this.canvas.addEventListener("wheel",(function(e){return t.onZoom(e)})),this.canvas.addEventListener("mousedown",(function(e){return t.onMouseDown(e)})),this.canvas.addEventListener("mouseup",(function(e){return t.onMouseUp()})),this.canvas.addEventListener("mousemove",(function(e){return t.onPullHorizontal(e)})),this.canvas.addEventListener("mouseleave",(function(e){return t.onMouseLeave()}))},e.prototype.destroyListeners=function(){var t=this;this.canvas.removeEventListener("wheel",(function(e){return t.onZoom(e)})),this.canvas.removeEventListener("mousedown",(function(e){return t.onMouseDown(e)})),this.canvas.removeEventListener("mouseup",(function(e){return t.onMouseUp()})),this.canvas.removeEventListener("mousemove",(function(e){return t.onPullHorizontal(e)})),this.canvas.removeEventListener("mouseleave",(function(e){return t.onMouseLeave()}))},e}(C),L=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),E=function(t){this.Time=null==t?void 0:t.Time,this.Open=null==t?void 0:t.Open,this.High=null==t?void 0:t.High,this.Low=null==t?void 0:t.Low,this.Close=null==t?void 0:t.Close,this.TickVolume=null==t?void 0:t.TickVolume},k=(L((function(t){return y.call(this,t)||this}),y=E),function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}()),_=function(t){this.ChunkStart=null==t?void 0:t.ChunkStart,this.Bars=null==t?void 0:t.Bars.map((function(t){return new E(t)}))},S=(function(t){k((function(e){return t.call(this,e)||this}),t)}(_),function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{c(r.next(t))}catch(t){i(t)}}function s(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}c((r=r.apply(t,e||[])).next())}))}),T=function(t,e){var n,r,o,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]},a=Object.create(("function"==typeof Iterator?Iterator:Object).prototype);return a.next=s(0),a.throw=s(1),a.return=s(2),"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(s){return function(c){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;a&&(a=0,s[0]&&(i=0)),i;)try{if(n=1,r&&(o=2&s[0]?r.return:s[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,s[1])).done)return o;switch(r=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return i.label++,{value:s[1],done:!1};case 5:i.label++,r=s[1],s=[0];continue;case 7:s=i.ops.pop(),i.trys.pop();continue;default:if(!((o=(o=i.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){i=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){i.label=s[1];break}if(6===s[0]&&i.label<o[1]){i.label=o[1],o=s;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(s);break}o[2]&&i.ops.pop(),i.trys.pop();continue}s=e.call(t,i)}catch(t){s=[6,t],r=0}finally{n=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}},M=function(){function t(){this.cache={},this.setupHttp()}return t.prototype.setupHttp=function(){var t=this;this.http={get:function(e){return S(t,void 0,void 0,(function(){var t;return T(this,(function(n){switch(n.label){case 0:return this.cache[e]?[2,this.cache[e]]:[4,fetch(e)];case 1:return[4,n.sent().json()];case 2:return t=n.sent(),this.cache[e]=t,[2,t]}}))}))}}},t.prototype.get=function(t){return S(this,void 0,void 0,(function(){return T(this,(function(e){return[2,this.http.get(t)]}))}))},t.prototype.getDemoData=function(){return S(this,void 0,void 0,(function(){return T(this,(function(t){return[2,this.get("https://beta.forextester.com/data/api/Metadata/bars/chunked?Broker=Advanced&Symbol=EURUSD&Timeframe=1&Start=57674&End=59113&UseMessagePack=false").then((function(t){return t.map((function(t){return new _(t)}))}))]}))}))},t}(),D=n(212),O={};O.styleTagTransform=d(),O.setAttributes=u(),O.insert=c().bind(null,"head"),O.domAPI=a(),O.insertStyleElement=p(),o()(D.A,O),D.A&&D.A.locals&&D.A.locals;var H=new M,P=new B;P.addDOMElement(),H.getDemoData().then((function(t){P.putData(t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,